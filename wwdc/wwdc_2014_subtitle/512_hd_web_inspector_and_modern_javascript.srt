

1
00:00:00.506 --> 00:00:10.776 A:middle
[ Silence ]

2
00:00:11.276 --> 00:00:12.046 A:middle
&gt;&gt; Hello, everyone.

3
00:00:12.786 --> 00:00:13.556 A:middle
I'm Tim Hatcher.

4
00:00:14.606 --> 00:00:15.186 A:middle
Good morning.

5
00:00:15.256 --> 00:00:15.946 A:middle
Thanks for coming.

6
00:00:16.516 --> 00:00:20.516 A:middle
[ Applause ]

7
00:00:21.016 --> 00:00:23.356 A:middle
So I'm going to talk to
you about Web Inspector

8
00:00:23.356 --> 00:00:26.046 A:middle
and Modern JavaScript.

9
00:00:27.626 --> 00:00:30.756 A:middle
But first, I'm going to just
talk about Modern JavaScript.

10
00:00:32.176 --> 00:00:34.816 A:middle
So, what exactly is
Modern JavaScript?

11
00:00:36.066 --> 00:00:38.936 A:middle
Well, let's go through some
of the history of JavaScript

12
00:00:39.586 --> 00:00:42.626 A:middle
which is also known
as ECMAScript

13
00:00:43.026 --> 00:00:44.226 A:middle
as some of you may know.

14
00:00:45.096 --> 00:00:46.726 A:middle
But it's had a long history.

15
00:00:46.726 --> 00:00:48.686 A:middle
It's been around since the '90s.

16
00:00:49.166 --> 00:00:53.106 A:middle
And it had a lot of
momentum back in the '90s

17
00:00:53.106 --> 00:00:55.846 A:middle
when it was first part
of the browser wars,

18
00:00:56.916 --> 00:00:59.526 A:middle
but it kind of sputtered
and stalled.

19
00:00:59.596 --> 00:01:02.536 A:middle
But JavaScript is alive
and well nowadays.

20
00:01:02.786 --> 00:01:06.946 A:middle
Everyone is using it from web
apps to server applications,

21
00:01:07.866 --> 00:01:13.426 A:middle
and some of the standards bodies
have been battling over some

22
00:01:13.426 --> 00:01:17.086 A:middle
of what should be included in
the next version of JavaScript.

23
00:01:18.506 --> 00:01:24.736 A:middle
And I'm happy to say that they
finally started coming together

24
00:01:24.736 --> 00:01:30.126 A:middle
and started releasing what
is known as ECMAScript 6.

25
00:01:31.776 --> 00:01:36.626 A:middle
And the sixth edition
brings a lot of cool things

26
00:01:36.626 --> 00:01:39.246 A:middle
and it's really just JavaScript

27
00:01:39.246 --> 00:01:41.786 A:middle
and that's how I'm
going to refer to it.

28
00:01:43.076 --> 00:01:47.786 A:middle
In this modern JavaScript world,
there's a lot of great things.

29
00:01:47.786 --> 00:01:49.146 A:middle
And this is just some of them.

30
00:01:49.246 --> 00:01:52.826 A:middle
There's some destructuring,
maps, promises.

31
00:01:53.886 --> 00:01:55.866 A:middle
And let's go over some
of these new features

32
00:01:55.866 --> 00:02:03.936 A:middle
that are also now available
in iOS 8 and OS X Yosemite.

33
00:02:04.046 --> 00:02:09.306 A:middle
So when they're available, I
mean, you can use them in Safari

34
00:02:09.306 --> 00:02:13.806 A:middle
or your iOS applications or
Mac applications and not just

35
00:02:13.806 --> 00:02:16.666 A:middle
in web views but also a
JavaScriptCore context.

36
00:02:18.066 --> 00:02:22.846 A:middle
So let's talk over
some of these.

37
00:02:23.026 --> 00:02:25.036 A:middle
Let's first talk about
some math additions.

38
00:02:26.056 --> 00:02:29.966 A:middle
JavaScript has had a math object
pretty much since day one.

39
00:02:31.256 --> 00:02:38.026 A:middle
But JavaScript nowadays is super
fast, with the modern LLVM JIT

40
00:02:38.026 --> 00:02:41.306 A:middle
that we have in iOS
8 and OS X Yosemite.

41
00:02:42.136 --> 00:02:45.956 A:middle
You need these super fast math
functions to do complex things

42
00:02:45.956 --> 00:02:50.366 A:middle
like WebGL or complex
scientific calculations.

43
00:02:51.846 --> 00:02:56.146 A:middle
And most of you will recognize
a lot of things in this list

44
00:02:56.146 --> 00:03:00.056 A:middle
that you've used in the past
for your own applications.

45
00:03:00.056 --> 00:03:02.716 A:middle
And they're now available
in Modern JavaScript.

46
00:03:03.146 --> 00:03:06.116 A:middle
So that's the math additions.

47
00:03:07.366 --> 00:03:11.016 A:middle
Now let's talk about
maps and sets.

48
00:03:11.266 --> 00:03:13.626 A:middle
So, what do I mean
by maps and sets?

49
00:03:14.826 --> 00:03:19.196 A:middle
Well, in JavaScript, you
might think of this as a map.

50
00:03:19.966 --> 00:03:23.366 A:middle
This is something that you
create as a generic object

51
00:03:24.156 --> 00:03:26.236 A:middle
and it's really just
a property bag.

52
00:03:26.236 --> 00:03:28.486 A:middle
You can throw whatever
you want on this object.

53
00:03:29.116 --> 00:03:34.266 A:middle
You can set simple strings and
any object can be the value.

54
00:03:34.776 --> 00:03:38.026 A:middle
And you can remove
things from that map.

55
00:03:39.006 --> 00:03:41.676 A:middle
Well, these maps have
some limitations.

56
00:03:41.676 --> 00:03:44.876 A:middle
There's string coercion when
you're-when it comes to the key.

57
00:03:45.496 --> 00:03:48.666 A:middle
Everything that is the key needs
to be coerced into a string,

58
00:03:48.666 --> 00:03:50.746 A:middle
so it's not going to give
you exactly what you want.

59
00:03:51.136 --> 00:03:52.216 A:middle
If you want to use it

60
00:03:52.216 --> 00:03:55.706 A:middle
for a property bag
that's tracking some node,

61
00:03:56.086 --> 00:03:59.526 A:middle
it won't work.

62
00:03:59.736 --> 00:04:03.196 A:middle
Well in Modern JavaScript,
there's now a map object.

63
00:04:03.586 --> 00:04:05.756 A:middle
And it does pretty
much the same thing

64
00:04:05.756 --> 00:04:08.276 A:middle
that you would do
with an object.

65
00:04:08.606 --> 00:04:11.366 A:middle
It has a little bit
different syntax and API,

66
00:04:12.066 --> 00:04:13.826 A:middle
but it's pretty much
all the same.

67
00:04:13.926 --> 00:04:15.786 A:middle
The most powerful
thing you can do

68
00:04:16.125 --> 00:04:20.676 A:middle
with the map object is you
can use any value as the key.

69
00:04:21.516 --> 00:04:25.696 A:middle
And a lot of people will
use this to track DOM nodes

70
00:04:25.696 --> 00:04:28.986 A:middle
that they have in the page,
adding some additional data

71
00:04:29.286 --> 00:04:33.596 A:middle
on the side instead of tacking
it onto the DOM node itself.

72
00:04:34.076 --> 00:04:37.246 A:middle
So it really allows you
to compartmentalize data

73
00:04:37.246 --> 00:04:38.676 A:middle
that you're tracking
on the page.

74
00:04:39.196 --> 00:04:42.226 A:middle
But there are some
issues with that.

75
00:04:43.086 --> 00:04:45.746 A:middle
If you add it to the
map, that map is going

76
00:04:45.746 --> 00:04:47.266 A:middle
to hold a hard reference to it

77
00:04:47.446 --> 00:04:50.266 A:middle
and that's why Modern
JavaScript has a WeakMap.

78
00:04:51.186 --> 00:04:56.436 A:middle
And that means whenever
the key disappears

79
00:04:56.436 --> 00:04:59.466 A:middle
or gets garbage collected,
it's also removed from the map.

80
00:05:00.036 --> 00:05:04.136 A:middle
So in this case, I have a
node in my WeakMap and when

81
00:05:04.566 --> 00:05:09.106 A:middle
that node is removed by doing
a remove call or a removeChild

82
00:05:09.546 --> 00:05:12.586 A:middle
in that page, it would
no longer be in the map

83
00:05:12.586 --> 00:05:14.126 A:middle
and the data that's associated

84
00:05:14.126 --> 00:05:16.106 A:middle
with it will also get
garbage collected.

85
00:05:16.556 --> 00:05:20.716 A:middle
So that's maps and sets.

86
00:05:20.716 --> 00:05:24.006 A:middle
And there's also a set
object that I didn't cover

87
00:05:24.006 --> 00:05:25.376 A:middle
but it's pretty straightforward.

88
00:05:25.376 --> 00:05:29.446 A:middle
It only allows the key
to be added to the set.

89
00:05:31.096 --> 00:05:32.836 A:middle
So now let's talk
about Destructuring.

90
00:05:35.636 --> 00:05:38.986 A:middle
If you got excited about some
of the new features in Swift,

91
00:05:39.366 --> 00:05:43.876 A:middle
this will be right up your
alley as far as JavaScript goes.

92
00:05:44.666 --> 00:05:49.016 A:middle
It allows you to return like
multiple objects in an array.

93
00:05:49.146 --> 00:05:53.056 A:middle
In this case, I have an
array of two numbers here.

94
00:05:53.786 --> 00:05:56.006 A:middle
And traditionally, I
would have to collect

95
00:05:56.006 --> 00:05:57.286 A:middle
that in a result object.

96
00:05:58.296 --> 00:06:03.326 A:middle
And I would have to break
each piece off from that array

97
00:06:03.326 --> 00:06:06.506 A:middle
to use it in a separate
variable that made more sense

98
00:06:06.626 --> 00:06:09.656 A:middle
in the scope I was using it in.

99
00:06:09.876 --> 00:06:14.406 A:middle
But with destructuring, we can
break that down into one line.

100
00:06:14.696 --> 00:06:18.866 A:middle
Now my function that's
returning two results

101
00:06:19.326 --> 00:06:21.086 A:middle
that maybe didn't
make sense as array,

102
00:06:21.086 --> 00:06:25.326 A:middle
but it was what I could use to
return multiple things at once,

103
00:06:25.866 --> 00:06:29.046 A:middle
I can now save those
into the alpha

104
00:06:29.046 --> 00:06:32.846 A:middle
and beta variables
right there in one line.

105
00:06:33.936 --> 00:06:38.326 A:middle
And this might look like an
array but when it's on-when it's

106
00:06:38.326 --> 00:06:43.326 A:middle
on the left side, we're dealing
with the destructuring syntax.

107
00:06:45.366 --> 00:06:47.156 A:middle
And it's not just for arrays.

108
00:06:48.186 --> 00:06:49.646 A:middle
You can destructure objects.

109
00:06:50.376 --> 00:06:53.306 A:middle
And this is when it becomes
more of a pattern matching.

110
00:06:53.676 --> 00:06:56.946 A:middle
So in my example here,
say I have a point object.

111
00:06:58.076 --> 00:07:01.326 A:middle
And normally, I would have
to save it off into a result

112
00:07:01.906 --> 00:07:03.786 A:middle
and break each piece
out if I wanted

113
00:07:03.786 --> 00:07:08.056 A:middle
to use some more concise
syntax for those variables.

114
00:07:08.606 --> 00:07:14.126 A:middle
But now, I have object
destructuring in this case.

115
00:07:15.096 --> 00:07:18.716 A:middle
And if I'd want a different
variable name than the property,

116
00:07:19.336 --> 00:07:23.126 A:middle
I can separate them by colons,
so x is the value that's coming

117
00:07:23.126 --> 00:07:25.266 A:middle
out of the object
pattern matching

118
00:07:25.836 --> 00:07:29.916 A:middle
and my x is the variable name
in the local scope in this case.

119
00:07:30.416 --> 00:07:32.746 A:middle
But if I want to
use the same name,

120
00:07:33.176 --> 00:07:36.316 A:middle
I could omit the second
piece and just use y.

121
00:07:36.316 --> 00:07:39.186 A:middle
And y is now a local
variable in this scope.

122
00:07:39.716 --> 00:07:44.376 A:middle
And you can do some
really fancy things

123
00:07:44.376 --> 00:07:45.556 A:middle
that I don't examples for.

124
00:07:45.556 --> 00:07:49.266 A:middle
But you can deeply nest these
pattern matches and objects

125
00:07:49.266 --> 00:07:50.996 A:middle
with arrays and vice versa.

126
00:07:50.996 --> 00:07:53.236 A:middle
So you can really
break apart your object

127
00:07:53.236 --> 00:07:55.666 A:middle
if that-if that's what
works for your application.

128
00:07:58.046 --> 00:07:59.276 A:middle
So that's destructuring.

129
00:07:59.686 --> 00:08:04.306 A:middle
Now let's talk about what
we call the Spread Operator.

130
00:08:05.356 --> 00:08:09.076 A:middle
And this is something that is
borrowed from many languages,

131
00:08:09.786 --> 00:08:15.756 A:middle
but it comes in very, very
handy and I love using it.

132
00:08:15.756 --> 00:08:20.176 A:middle
It's-It really takes away
some of the common idioms

133
00:08:20.176 --> 00:08:24.916 A:middle
that you would do before if
you're building up arguments

134
00:08:24.916 --> 00:08:27.936 A:middle
that you want to call in
a function as an array,

135
00:08:28.266 --> 00:08:32.106 A:middle
before you would have to
resort to .call or .apply

136
00:08:32.846 --> 00:08:35.216 A:middle
and pass in those arguments.

137
00:08:36.306 --> 00:08:39.616 A:middle
But now, with the Spread
Operator which is represented

138
00:08:39.616 --> 00:08:42.666 A:middle
by three dots prefixing
an object.

139
00:08:43.836 --> 00:08:45.826 A:middle
And in this case
it's-it's an array.

140
00:08:46.726 --> 00:08:50.136 A:middle
But secretly, the Spread
Operator works on anything.

141
00:08:50.586 --> 00:08:52.056 A:middle
It even works on maps.

142
00:08:52.176 --> 00:08:55.526 A:middle
And it will break it out
in key value sequences.

143
00:08:57.276 --> 00:09:00.856 A:middle
So, anything that's has support
for iteration, which I'll talk

144
00:09:00.856 --> 00:09:02.586 A:middle
about in a bit, can be spread.

145
00:09:02.586 --> 00:09:05.706 A:middle
And this will spread it out
and call my function foo

146
00:09:06.116 --> 00:09:10.676 A:middle
with the three arguments
that are in the array.

147
00:09:10.746 --> 00:09:13.136 A:middle
One thing that you could
never do in JavaScript

148
00:09:13.496 --> 00:09:17.196 A:middle
and you can only do now with
the Spread Operator is called a

149
00:09:17.196 --> 00:09:22.136 A:middle
constructor with an array
input or a map input.

150
00:09:22.896 --> 00:09:27.166 A:middle
You can now take your parts
of a date and spread them

151
00:09:27.166 --> 00:09:30.076 A:middle
across the date constructor
instead of having

152
00:09:30.076 --> 00:09:35.406 A:middle
to manually do 0, 1, 2 and
break it out like that.

153
00:09:39.196 --> 00:09:42.066 A:middle
The Spread Operator
is also useful

154
00:09:42.066 --> 00:09:44.726 A:middle
in the construction
of array literals.

155
00:09:45.226 --> 00:09:47.936 A:middle
Say you have something
that's pretty repetitious.

156
00:09:47.986 --> 00:09:51.066 A:middle
You want to have a separate
form and a combined form.

157
00:09:51.336 --> 00:09:55.136 A:middle
Normally you have to either
repeat the data or push and pop

158
00:09:55.136 --> 00:09:58.636 A:middle
and add everything,
concatenate everything together.

159
00:09:59.886 --> 00:10:04.226 A:middle
But with the Spread Operator
you can just spread those other

160
00:10:04.226 --> 00:10:07.386 A:middle
arrays right out into the new
array that you're constructing.

161
00:10:07.836 --> 00:10:12.216 A:middle
So this is a handy way to do
pretty complex concatenation.

162
00:10:13.036 --> 00:10:15.056 A:middle
And you can understand
what it's doing

163
00:10:15.516 --> 00:10:18.956 A:middle
without having the
parse different calls

164
00:10:18.956 --> 00:10:20.606 A:middle
to different array functions.

165
00:10:21.156 --> 00:10:24.516 A:middle
So that's the Spread Operator.

166
00:10:24.516 --> 00:10:27.546 A:middle
Now let's talk about
something new.

167
00:10:27.546 --> 00:10:32.226 A:middle
A new For loop that's
available in JavaScript.

168
00:10:32.226 --> 00:10:35.826 A:middle
JavaScript has traditional
loops, which you can iterate

169
00:10:35.826 --> 00:10:39.116 A:middle
over an array by doing
an index and a length.

170
00:10:39.246 --> 00:10:43.136 A:middle
And you still might need
to use this if you care

171
00:10:43.136 --> 00:10:44.716 A:middle
about the index or the length.

172
00:10:44.846 --> 00:10:49.166 A:middle
And you're doing some complex
operation based on those.

173
00:10:49.696 --> 00:10:58.346 A:middle
Some people have avoided this
syntax because it's ugly.

174
00:10:58.346 --> 00:11:02.596 A:middle
And they use something
for-called forEach on an array

175
00:11:03.016 --> 00:11:05.876 A:middle
that lets you iterate
over individual items

176
00:11:05.876 --> 00:11:09.276 A:middle
and you handily get
the item right there

177
00:11:09.276 --> 00:11:10.156 A:middle
that you can work with.

178
00:11:10.866 --> 00:11:12.486 A:middle
But this creates a closure.

179
00:11:12.756 --> 00:11:16.786 A:middle
It does a lot of complex
things that you might not want

180
00:11:16.786 --> 00:11:18.266 A:middle
to deal with overhead-wise.

181
00:11:20.356 --> 00:11:23.926 A:middle
Well, with the new For loop
that's in modern JavaScript,

182
00:11:25.226 --> 00:11:28.536 A:middle
this is all you have to write
to iterate over an array.

183
00:11:29.466 --> 00:11:33.106 A:middle
And this will iterate over
every item in the array

184
00:11:33.866 --> 00:11:35.496 A:middle
if you break early,
it will stop.

185
00:11:35.696 --> 00:11:37.566 A:middle
But it starts at the first item.

186
00:11:37.996 --> 00:11:41.176 A:middle
But it's not just for arrays.

187
00:11:41.336 --> 00:11:43.946 A:middle
Say you have a set, you
can iterate over that set.

188
00:11:44.466 --> 00:11:49.496 A:middle
And if you have a map you can
iterate over the key and value.

189
00:11:49.746 --> 00:11:51.626 A:middle
Very similar to what
you can do in Swift.

190
00:11:52.846 --> 00:11:57.096 A:middle
So now you have the key in value
right there to process both

191
00:11:57.096 --> 00:11:59.456 A:middle
at the same time instead
of doing extra lines

192
00:11:59.456 --> 00:12:01.856 A:middle
of code using the for-in loop

193
00:12:02.276 --> 00:12:03.526 A:middle
which is available
on JavaScript.

194
00:12:03.526 --> 00:12:05.686 A:middle
Now you can do it
right here with for-of.

195
00:12:07.006 --> 00:12:09.496 A:middle
And for-of is the
only way to iterate

196
00:12:10.016 --> 00:12:12.806 A:middle
over the keys in values in maps.

197
00:12:13.196 --> 00:12:15.126 A:middle
For-in will not do
what you expect

198
00:12:15.536 --> 00:12:19.646 A:middle
and that-for reasons I'm
not going to go into.

199
00:12:19.826 --> 00:12:22.136 A:middle
But maybe you want to
iterate over a WeakMap.

200
00:12:23.196 --> 00:12:24.526 A:middle
That's not supported.

201
00:12:25.366 --> 00:12:29.276 A:middle
For reasons that involve
the garbage collection,

202
00:12:29.926 --> 00:12:32.916 A:middle
you cannot iterate over the
keys and values of the WeakMap

203
00:12:33.296 --> 00:12:40.376 A:middle
and this is part of the spec.
So, that's for-of loops.

204
00:12:42.336 --> 00:12:46.836 A:middle
Now, one of the new
things in modern JavaScript

205
00:12:46.836 --> 00:12:49.486 A:middle
that I'm really excited
about is Promises.

206
00:12:50.846 --> 00:12:54.136 A:middle
And it solves a longstanding
problem of JavaScript.

207
00:12:54.526 --> 00:12:56.206 A:middle
Now that JavaScript
is moving more

208
00:12:56.206 --> 00:13:00.186 A:middle
and more asynchronous everything
is asynchronous, you don't want

209
00:13:00.186 --> 00:13:01.726 A:middle
to be blocking your application.

210
00:13:02.866 --> 00:13:08.086 A:middle
And say you have a function that
you've written that loads a URL,

211
00:13:08.456 --> 00:13:12.396 A:middle
maybe it does an XHR behind
the scenes for you to wrap

212
00:13:12.396 --> 00:13:14.996 A:middle
up all the different
browser incompatibilities

213
00:13:14.996 --> 00:13:15.586 A:middle
that are out there.

214
00:13:16.366 --> 00:13:20.506 A:middle
So this will load a URL
and that's all it'll do.

215
00:13:20.906 --> 00:13:22.026 A:middle
You can't get the data.

216
00:13:22.706 --> 00:13:26.456 A:middle
To get the data, you might be
inclined to do a return result

217
00:13:26.456 --> 00:13:28.876 A:middle
that gives you the
data that was loaded.

218
00:13:29.486 --> 00:13:31.076 A:middle
But this is synchronous.

219
00:13:31.176 --> 00:13:34.316 A:middle
You can't get away with
this in a shipping product

220
00:13:34.776 --> 00:13:37.196 A:middle
without blocking
your user interface.

221
00:13:39.136 --> 00:13:42.246 A:middle
So, you have to resort
to a callback function.

222
00:13:42.246 --> 00:13:44.976 A:middle
And JavaScript makes
this real easy.

223
00:13:45.526 --> 00:13:47.766 A:middle
I do this everyday
in JavaScript:

224
00:13:48.086 --> 00:13:49.346 A:middle
pass in a callback function.

225
00:13:49.896 --> 00:13:53.876 A:middle
And it works and it's very
usable and it's very handy.

226
00:13:55.696 --> 00:14:00.536 A:middle
But when it gets deeply
nested and you're passing

227
00:14:00.536 --> 00:14:01.986 A:middle
in multiple information

228
00:14:02.636 --> 00:14:05.706 A:middle
and it just gets confusing
and hard to follow.

229
00:14:05.706 --> 00:14:07.676 A:middle
You have all these load
calls in this case.

230
00:14:08.796 --> 00:14:11.166 A:middle
Which one is handling
which information?

231
00:14:11.726 --> 00:14:14.356 A:middle
Well, this is what
Promises solved.

232
00:14:15.606 --> 00:14:17.996 A:middle
With Promises you can
write something like this

233
00:14:19.276 --> 00:14:22.446 A:middle
where the first load
returns a promise.

234
00:14:23.696 --> 00:14:25.696 A:middle
And immediately on
returning that promise,

235
00:14:25.696 --> 00:14:27.376 A:middle
I can call the .then function.

236
00:14:27.596 --> 00:14:29.526 A:middle
And that's pretty much
the only API you need

237
00:14:29.526 --> 00:14:31.226 A:middle
to be concerned about
with Promises.

238
00:14:32.336 --> 00:14:35.256 A:middle
And you can pass a call
back to that .then function

239
00:14:35.696 --> 00:14:39.006 A:middle
which will get called when
that promise is fulfilled.

240
00:14:40.516 --> 00:14:45.426 A:middle
And that callback can
return another promise.

241
00:14:46.386 --> 00:14:47.796 A:middle
And this where it's magical,

242
00:14:48.226 --> 00:14:51.396 A:middle
you can chain-keep
chaining along that.

243
00:14:51.756 --> 00:14:56.226 A:middle
So these callbacks are in line
here just for clarity for you.

244
00:14:56.696 --> 00:14:59.586 A:middle
But they might be
named functions

245
00:14:59.586 --> 00:15:00.696 A:middle
that you have somewhere else.

246
00:15:01.526 --> 00:15:06.356 A:middle
And it makes it very clear that
this is the order of operations.

247
00:15:08.696 --> 00:15:10.246 A:middle
So that's Promises.

248
00:15:11.196 --> 00:15:17.006 A:middle
And taking it to the next level
you can then use another API,

249
00:15:17.006 --> 00:15:20.276 A:middle
a global API, Promise.all.

250
00:15:20.956 --> 00:15:25.656 A:middle
And what this does is you can
pass in an array of promises.

251
00:15:26.686 --> 00:15:30.826 A:middle
And it will return a new
promise and that new promise

252
00:15:31.056 --> 00:15:36.566 A:middle
that it returns is dependent on
all of those promises finishing.

253
00:15:37.496 --> 00:15:39.016 A:middle
If any of them error out,

254
00:15:39.706 --> 00:15:42.666 A:middle
your "then" object can
get past the callback

255
00:15:42.666 --> 00:15:44.076 A:middle
that gets called for errors.

256
00:15:44.446 --> 00:15:48.326 A:middle
But in this case, "done"
will get called when only all

257
00:15:48.326 --> 00:15:52.096 A:middle
of those promises
succeed or fulfilled.

258
00:15:54.616 --> 00:15:56.656 A:middle
But maybe you only care
about the first one.

259
00:15:56.896 --> 00:15:58.196 A:middle
You're loading a bunch of images

260
00:15:58.196 --> 00:16:00.116 A:middle
and once you got one
image you're ready to go.

261
00:16:00.896 --> 00:16:02.866 A:middle
That's where Promise.race
comes in.

262
00:16:02.996 --> 00:16:08.066 A:middle
It will call your
callback when the first one

263
00:16:08.066 --> 00:16:09.596 A:middle
of those promises is fulfilled.

264
00:16:10.206 --> 00:16:14.146 A:middle
So that's a quick
glance of Promises.

265
00:16:14.146 --> 00:16:19.236 A:middle
So that pretty much wraps it
up with Modern JavaScript,

266
00:16:19.236 --> 00:16:21.606 A:middle
at least the parts that
we've already implemented

267
00:16:21.966 --> 00:16:24.136 A:middle
and decided were
ready for consumption.

268
00:16:24.546 --> 00:16:26.006 A:middle
There's a lot that's being done

269
00:16:26.006 --> 00:16:29.136 A:middle
in ECMAScript 6 that
is not ready.

270
00:16:29.326 --> 00:16:31.266 A:middle
And it's going to be
coming down the pipeline.

271
00:16:31.766 --> 00:16:34.246 A:middle
But these pieces we feel
that you're ready to use

272
00:16:34.246 --> 00:16:40.396 A:middle
in your application, in
browsers that support them.

273
00:16:41.716 --> 00:16:43.746 A:middle
So now let's talk about
the Web Inspector.

274
00:16:46.066 --> 00:16:48.656 A:middle
So if you're not familiar
with the Web Inspector,

275
00:16:50.006 --> 00:16:51.236 A:middle
this is what it looks like.

276
00:16:52.816 --> 00:16:56.516 A:middle
And we've had this UI for a
while but we've done a lot.

277
00:16:56.516 --> 00:16:58.026 A:middle
We've fixed a lot of bugs.

278
00:16:58.026 --> 00:17:00.436 A:middle
We've added a lot of features.

279
00:17:01.006 --> 00:17:04.296 A:middle
But the main thing we've done
this year is make the Web

280
00:17:04.296 --> 00:17:06.526 A:middle
Inspector available
in more places.

281
00:17:07.356 --> 00:17:10.326 A:middle
We've listened to your
feedback and you want to be able

282
00:17:10.326 --> 00:17:12.346 A:middle
to inspect your Mac application.

283
00:17:12.346 --> 00:17:15.076 A:middle
You want to be able to inspect
your JavaScriptCore context.

284
00:17:15.616 --> 00:17:20.465 A:middle
And that's exactly what you can
do with iOS 8 and OS X Yosemite.

285
00:17:22.036 --> 00:17:29.056 A:middle
So with Safari, you've been
able to inspect your iOS apps

286
00:17:29.176 --> 00:17:32.466 A:middle
and iOS Safari by tethering
up to your computer.

287
00:17:33.836 --> 00:17:43.276 A:middle
But now you can inspect your
Mac application and right there

288
00:17:43.366 --> 00:17:46.116 A:middle
from Safari see a list
of your Mac applications.

289
00:17:46.386 --> 00:17:47.446 A:middle
So what's that look like?

290
00:17:49.086 --> 00:17:51.416 A:middle
But first, like I said, you want

291
00:17:51.416 --> 00:17:53.536 A:middle
to inspect your JavaScriptCore
context.

292
00:17:54.496 --> 00:17:56.826 A:middle
But Web Inspector is
all about the web.

293
00:17:57.986 --> 00:18:01.506 A:middle
And it's only been able to work
with WebKit up until this point.

294
00:18:02.306 --> 00:18:04.236 A:middle
But now Web Inspector
can connect

295
00:18:04.536 --> 00:18:06.826 A:middle
to your JavaScriptCore-based
applications.

296
00:18:07.426 --> 00:18:09.336 A:middle
So even if you're
not using a web view

297
00:18:09.886 --> 00:18:13.156 A:middle
but you're using JavaScriptCore
for some logic in your game,

298
00:18:13.776 --> 00:18:16.796 A:middle
you can now debug
that JavaScript right

299
00:18:16.796 --> 00:18:19.306 A:middle
in the Web Inspector
and it's really great.

300
00:18:19.866 --> 00:18:21.776 A:middle
So let's-let's show
you what it looks like.

301
00:18:22.896 --> 00:18:29.006 A:middle
So, Mac App inspection, like I
said, will show up right next

302
00:18:29.006 --> 00:18:31.036 A:middle
to your iOS devices
in the Develop menu.

303
00:18:32.086 --> 00:18:36.626 A:middle
In this case, I have two Mac
Apps and the second one here,

304
00:18:36.806 --> 00:18:39.486 A:middle
JSPong, is a JavaScriptCore app.

305
00:18:39.816 --> 00:18:41.126 A:middle
The first one is a web view

306
00:18:41.496 --> 00:18:43.016 A:middle
but they're right
there side by side.

307
00:18:43.576 --> 00:18:44.776 A:middle
They're first class citizens.

308
00:18:45.436 --> 00:18:48.786 A:middle
And like I said, you
can also still connect

309
00:18:48.786 --> 00:18:51.316 A:middle
to your iOS applications
and iOS Safari

310
00:18:51.916 --> 00:18:53.296 A:middle
from the same Develop menu.

311
00:18:53.836 --> 00:18:58.956 A:middle
But for Mac App inspection
we require you

312
00:18:58.956 --> 00:19:01.416 A:middle
to add an entitlement
to your app.

313
00:19:02.666 --> 00:19:05.586 A:middle
You don't want anyone else
debugging your JavaScript

314
00:19:05.586 --> 00:19:08.106 A:middle
context or stealing
your JavaScript code

315
00:19:08.106 --> 00:19:10.616 A:middle
from your Mac Application
that you've worked so hard on.

316
00:19:11.286 --> 00:19:15.526 A:middle
So we require you to have this
entitlement on your applications

317
00:19:15.526 --> 00:19:17.036 A:middle
that you're developing locally.

318
00:19:18.096 --> 00:19:21.696 A:middle
And it's very simple to do
and I'll give you a demo

319
00:19:21.696 --> 00:19:23.926 A:middle
of it here in a little bit.

320
00:19:23.926 --> 00:19:25.846 A:middle
But what about JavaScriptCore
inspection?

321
00:19:26.376 --> 00:19:28.696 A:middle
What's that look like?

322
00:19:28.966 --> 00:19:32.386 A:middle
Well, it looks just
like the Web Inspector.

323
00:19:32.916 --> 00:19:35.706 A:middle
This is the same Web Inspector
that you saw a little bit ago.

324
00:19:36.046 --> 00:19:37.606 A:middle
The other one was
for the web view.

325
00:19:38.226 --> 00:19:39.966 A:middle
This one is for JavaScriptCore
context.

326
00:19:40.526 --> 00:19:43.806 A:middle
There's a couple of buttons that
are missing that don't apply

327
00:19:43.806 --> 00:19:45.306 A:middle
to JavaScriptCore context like,

328
00:19:45.306 --> 00:19:47.806 A:middle
styles and the DOM
and things like that.

329
00:19:48.366 --> 00:19:51.616 A:middle
But for the most part
it's everything you need

330
00:19:51.616 --> 00:19:53.946 A:middle
to debug your JavaScriptCore
application.

331
00:19:54.456 --> 00:19:58.426 A:middle
And you have the full console.

332
00:19:58.556 --> 00:20:02.846 A:middle
You can do a REPL, evaluate
JavaScript or see console.logs.

333
00:20:03.246 --> 00:20:07.476 A:middle
Console.log is now available in
your JavaScriptCore application.

334
00:20:08.066 --> 00:20:11.036 A:middle
So if you have your own log
function you can now abandon it

335
00:20:11.036 --> 00:20:14.386 A:middle
and start using console.log
and get all the great benefits

336
00:20:14.386 --> 00:20:16.126 A:middle
of the Web Inspector's
Log functions.

337
00:20:16.746 --> 00:20:20.626 A:middle
But if you don't do anything,

338
00:20:20.846 --> 00:20:23.106 A:middle
the console is pretty much
all you have available.

339
00:20:23.856 --> 00:20:24.746 A:middle
And I'll tell you why.

340
00:20:25.416 --> 00:20:27.676 A:middle
We don't know what
you're evaluating

341
00:20:27.676 --> 00:20:29.496 A:middle
in your JavaScriptCore context.

342
00:20:30.166 --> 00:20:32.036 A:middle
If you're evaluating
large scripts,

343
00:20:32.096 --> 00:20:33.866 A:middle
those are something you
probably want to debug

344
00:20:33.866 --> 00:20:38.246 A:middle
but you could be evaluating
something every 200 milliseconds

345
00:20:38.566 --> 00:20:40.966 A:middle
and that would quickly
pollute the sidebar here.

346
00:20:41.486 --> 00:20:43.936 A:middle
So you-any script
that you want to debug

347
00:20:43.936 --> 00:20:48.646 A:middle
in the Web Inspector we will
need you to supply a URL

348
00:20:48.646 --> 00:20:50.906 A:middle
or just a plain name
for that script.

349
00:20:52.416 --> 00:20:55.406 A:middle
And we've given you a
couple new APIs for this.

350
00:20:56.256 --> 00:20:59.496 A:middle
There has always been the
EvaluateScript functions.

351
00:21:00.706 --> 00:21:03.726 A:middle
We now have a new Objective-C
one that takes a sourceURL,

352
00:21:04.546 --> 00:21:06.826 A:middle
and this URL can be a file URL.

353
00:21:06.826 --> 00:21:07.736 A:middle
It can be any URL.

354
00:21:07.736 --> 00:21:12.176 A:middle
The Web Inspector really
doesn't take it other

355
00:21:12.176 --> 00:21:14.146 A:middle
than to get the name
at this point.

356
00:21:14.756 --> 00:21:17.616 A:middle
But if it's a file URL, it will
have a little bit extra benefit

357
00:21:17.616 --> 00:21:19.766 A:middle
and I'll talk to you
about that a little bit,

358
00:21:20.356 --> 00:21:24.126 A:middle
but JSEvaluateScript has
always supported the sourceURL

359
00:21:24.426 --> 00:21:26.216 A:middle
but a lot of people
just pass null to it.

360
00:21:26.636 --> 00:21:28.326 A:middle
So if you're using
the old C API,

361
00:21:29.326 --> 00:21:32.146 A:middle
make sure to start passing
a sourceURL for things

362
00:21:32.146 --> 00:21:34.356 A:middle
that you want to debug
that way they will show

363
00:21:34.356 --> 00:21:35.306 A:middle
up in the Web Inspector.

364
00:21:36.386 --> 00:21:38.406 A:middle
And that's for scripts.

365
00:21:38.406 --> 00:21:39.856 A:middle
But what about your context?

366
00:21:39.856 --> 00:21:42.716 A:middle
Identifying a context is pretty
difficult with JavaScript.

367
00:21:42.716 --> 00:21:44.626 A:middle
We don't know what it is.

368
00:21:45.446 --> 00:21:48.526 A:middle
By default it will just say
JSContext in the Develop menu.

369
00:21:48.906 --> 00:21:51.586 A:middle
But if you have a multiple
context, you don't want

370
00:21:51.586 --> 00:21:54.736 A:middle
to see a list that says
JSContext, JSContext, JSContext,

371
00:21:55.336 --> 00:21:57.536 A:middle
you want to identify those.

372
00:21:58.466 --> 00:22:00.946 A:middle
And as the developer, you
should know what you're using

373
00:22:00.946 --> 00:22:03.776 A:middle
that context for and
we provide this new API

374
00:22:03.776 --> 00:22:06.046 A:middle
that allows you to
name your context.

375
00:22:06.376 --> 00:22:08.426 A:middle
And the name is only
used for debugging.

376
00:22:08.426 --> 00:22:10.436 A:middle
It will only show up in
Safari's Develop menu.

377
00:22:11.026 --> 00:22:14.126 A:middle
So let's just give
a demo of this.

378
00:22:14.596 --> 00:22:19.306 A:middle
So I have a sample application
that we released a while ago

379
00:22:19.526 --> 00:22:22.596 A:middle
at a previous WWDC: JSPong.

380
00:22:23.596 --> 00:22:24.946 A:middle
And it's a simple pong game.

381
00:22:25.626 --> 00:22:29.626 A:middle
But I have some things I need
to do to it to make it work

382
00:22:29.626 --> 00:22:31.026 A:middle
with JSContext inspection.

383
00:22:31.466 --> 00:22:34.126 A:middle
The first thing I need to do
is make sure the entitlement

384
00:22:34.126 --> 00:22:34.526 A:middle
is there.

385
00:22:35.016 --> 00:22:36.426 A:middle
And if you're in the Apps Store,

386
00:22:36.426 --> 00:22:38.476 A:middle
you probably already have
an entitlements file.

387
00:22:38.886 --> 00:22:40.926 A:middle
In this case, I already
have an App Sandbox

388
00:22:41.236 --> 00:22:43.026 A:middle
and that will give
me an entitlement.

389
00:22:43.456 --> 00:22:46.916 A:middle
And I have it right here in the
sidebar, JSPong.entitlements.

390
00:22:47.746 --> 00:22:53.276 A:middle
So let's go in and add the
entitlement that we need.

391
00:22:53.276 --> 00:23:00.586 A:middle
And I said it was
com.apple.security.

392
00:23:01.906 --> 00:23:07.316 A:middle
get-task-allow, and
it's a Boolean.

393
00:23:07.866 --> 00:23:11.716 A:middle
And we'll go ahead
and say "Yes."

394
00:23:14.116 --> 00:23:15.786 A:middle
So that's all I need to do

395
00:23:15.786 --> 00:23:19.366 A:middle
to allow JSContext
inspection in my application.

396
00:23:19.596 --> 00:23:20.736 A:middle
And I'll go ahead and save that.

397
00:23:20.736 --> 00:23:24.346 A:middle
And I'll go ahead
and build and run it.

398
00:23:25.926 --> 00:23:28.096 A:middle
And it's a very simple
pong game.

399
00:23:28.096 --> 00:23:30.686 A:middle
The AI is controlled
by a JavaScript

400
00:23:30.686 --> 00:23:32.136 A:middle
that you can modify
here in the app.

401
00:23:32.226 --> 00:23:33.796 A:middle
I'm not going to
talk about that.

402
00:23:34.626 --> 00:23:39.366 A:middle
But now I can go to Safari
and, in the Develop menu,

403
00:23:40.286 --> 00:23:46.046 A:middle
I will see Mac Pro and I will
see JSPong and my JSContext.

404
00:23:46.606 --> 00:23:48.436 A:middle
And I didn't name
the context yet,

405
00:23:48.436 --> 00:23:50.156 A:middle
so it's getting the
default name.

406
00:23:50.826 --> 00:23:52.246 A:middle
And I'll go ahead
and inspect that.

407
00:23:52.246 --> 00:23:54.816 A:middle
And you'll see the
resources are empty.

408
00:23:54.816 --> 00:23:58.336 A:middle
I'm not seeing that that
AI script that I've loaded.

409
00:23:59.026 --> 00:24:01.996 A:middle
But I-if I want to debug that,
I'll need to give that a name.

410
00:24:02.526 --> 00:24:06.216 A:middle
But at this point, I have
access to the console.

411
00:24:06.676 --> 00:24:07.926 A:middle
If you don't do anything,

412
00:24:07.956 --> 00:24:10.566 A:middle
you can do evaluations
here in the console.

413
00:24:11.796 --> 00:24:14.696 A:middle
You can get access
to any globals

414
00:24:14.696 --> 00:24:17.026 A:middle
that you might have
available in your context.

415
00:24:18.816 --> 00:24:22.196 A:middle
And you will see exceptions
in logs and errors.

416
00:24:22.886 --> 00:24:25.236 A:middle
And in this case, we
have an example exception

417
00:24:26.116 --> 00:24:27.726 A:middle
and this will give
you a back trace,

418
00:24:27.786 --> 00:24:31.316 A:middle
not just of your JavaScript,
but of your native code.

419
00:24:31.706 --> 00:24:35.036 A:middle
So you can see exactly
where that function

420
00:24:35.036 --> 00:24:38.286 A:middle
or script was evaluated all
the way to your native codes

421
00:24:38.286 --> 00:24:41.026 A:middle
so you can trace it back
to the exist-the origin.

422
00:24:43.396 --> 00:24:48.316 A:middle
So let's go back into Xcode
and name some of these.

423
00:24:49.636 --> 00:24:50.556 A:middle
So it's pretty simple.

424
00:24:50.556 --> 00:24:51.896 A:middle
I'll just comment this out.

425
00:24:51.896 --> 00:24:54.626 A:middle
This will name my
context, Pong Context.

426
00:24:54.906 --> 00:24:56.326 A:middle
I only have one context.

427
00:24:56.326 --> 00:24:57.526 A:middle
But if I had multiple ones,

428
00:24:57.526 --> 00:25:01.156 A:middle
it would be imperative
for me to name them.

429
00:25:01.926 --> 00:25:04.646 A:middle
And when I'm evaluating
the AI script,

430
00:25:05.956 --> 00:25:08.536 A:middle
all I have to do
is construct a URL.

431
00:25:08.536 --> 00:25:11.156 A:middle
In this case, I'm just
making a URL with a string

432
00:25:11.736 --> 00:25:14.136 A:middle
and it really doesn't
have a location.

433
00:25:15.116 --> 00:25:19.046 A:middle
And I'll just use the
new withSourceURL method

434
00:25:19.566 --> 00:25:22.936 A:middle
and pass in that URL.

435
00:25:23.166 --> 00:25:26.476 A:middle
Now let's build and run
and see what happens

436
00:25:26.476 --> 00:25:27.346 A:middle
in the Web Inspector.

437
00:25:30.916 --> 00:25:32.746 A:middle
We'll go ahead and
reconnect to the pong game.

438
00:25:33.786 --> 00:25:38.396 A:middle
In the Resource sidebar,
we now have that AI script.

439
00:25:39.526 --> 00:25:42.676 A:middle
And in the app, we didn't
syntax highlight it.

440
00:25:42.676 --> 00:25:44.406 A:middle
But Web Inspector
knows exactly how

441
00:25:44.406 --> 00:25:45.816 A:middle
to syntax highlight JavaScript.

442
00:25:46.616 --> 00:25:49.776 A:middle
So we can set breakpoints
right here.

443
00:25:49.776 --> 00:25:54.396 A:middle
And since the script is called
every iteration of the movement,

444
00:25:55.146 --> 00:25:56.156 A:middle
it should break right away.

445
00:25:56.156 --> 00:25:57.836 A:middle
And now I'm in the debugger.

446
00:25:58.616 --> 00:26:01.126 A:middle
I have access to the call stack.

447
00:26:01.606 --> 00:26:04.136 A:middle
There's nothing other than
this function being called.

448
00:26:04.666 --> 00:26:06.526 A:middle
But if there was a
deeply nested call stack,

449
00:26:06.526 --> 00:26:08.206 A:middle
you would see it right
there in the sidebar.

450
00:26:09.216 --> 00:26:14.216 A:middle
And I can also bring open the
scope chain and we can-just

451
00:26:14.216 --> 00:26:16.426 A:middle
like you would any
JavaScript context,

452
00:26:16.426 --> 00:26:20.066 A:middle
you can now inspect the objects
that you're getting passed

453
00:26:20.066 --> 00:26:24.166 A:middle
around or your global
scope in this case.

454
00:26:24.696 --> 00:26:30.046 A:middle
And we can do what any
debugger does and step through,

455
00:26:30.746 --> 00:26:33.576 A:middle
and do anything you would
do in a normal debugger,

456
00:26:34.306 --> 00:26:37.306 A:middle
in addition to hovering
over variables

457
00:26:37.306 --> 00:26:41.036 A:middle
to see their current
value or evaluate things

458
00:26:41.036 --> 00:26:43.666 A:middle
in this current scope
in the console.

459
00:26:44.486 --> 00:26:54.496 A:middle
So in this case, let's try
modifying the ball here.

460
00:26:54.716 --> 00:26:58.136 A:middle
Maybe we want to modify
the rules of pong here

461
00:26:58.136 --> 00:27:00.136 A:middle
and make something
really easy to hit.

462
00:27:01.236 --> 00:27:02.896 A:middle
So I've gone ahead
and modified that.

463
00:27:02.896 --> 00:27:09.666 A:middle
And I have an update function
here that will redraw my scene.

464
00:27:10.056 --> 00:27:12.506 A:middle
And you can see the
ball increase in size

465
00:27:12.866 --> 00:27:14.726 A:middle
as I may-after I
made that change.

466
00:27:15.426 --> 00:27:18.816 A:middle
And this is working with
Objective-C bridged objects.

467
00:27:18.816 --> 00:27:22.596 A:middle
The ball object here is a
bridged Objective-C object

468
00:27:23.076 --> 00:27:27.436 A:middle
that you can use as you would
a normal JavaScript object.

469
00:27:28.686 --> 00:27:30.596 A:middle
So that's JSContext inspection.

470
00:27:31.396 --> 00:27:32.326 A:middle
And we'll go ahead and play it

471
00:27:32.326 --> 00:27:34.566 A:middle
and the ball stays the same
size and keeps on going.

472
00:27:37.006 --> 00:27:41.926 A:middle
So again, any web view, any
JavaScript context that you have

473
00:27:41.926 --> 00:27:44.636 A:middle
in your application can
be debugged now as long

474
00:27:44.636 --> 00:27:45.886 A:middle
as you have the right
entitlement.

475
00:27:46.346 --> 00:27:48.346 A:middle
And this also applies for iOS.

476
00:27:48.346 --> 00:27:51.776 A:middle
So only builds that you build
and run on to your device

477
00:27:52.176 --> 00:27:55.226 A:middle
or into the iOS simulator
will be inspectable.

478
00:27:55.256 --> 00:27:57.846 A:middle
Any app from the App
Store will not be allowed

479
00:27:57.846 --> 00:27:59.416 A:middle
to be inspected by anyone else.

480
00:28:00.766 --> 00:28:03.386 A:middle
So that's all you need.

481
00:28:03.606 --> 00:28:06.316 A:middle
And again, name your context
and name your scripts,

482
00:28:06.316 --> 00:28:08.566 A:middle
so you can easily identify
them when you're debugging.

483
00:28:09.056 --> 00:28:14.676 A:middle
So now let's talk about
something that we've had

484
00:28:14.676 --> 00:28:18.876 A:middle
in the Web Inspector for
a while: the Timeline.

485
00:28:18.876 --> 00:28:21.516 A:middle
And something new this year
is the Source Code Timelines.

486
00:28:21.516 --> 00:28:22.876 A:middle
So what do I mean by that?

487
00:28:23.066 --> 00:28:24.916 A:middle
What sorts of problems
does it solve?

488
00:28:26.316 --> 00:28:31.446 A:middle
So Source Code Timelines help
you answer this question.

489
00:28:31.886 --> 00:28:34.786 A:middle
What happened when I click
on something on the page?

490
00:28:36.256 --> 00:28:38.176 A:middle
Maybe it's a new project
that you're working on,

491
00:28:38.566 --> 00:28:40.166 A:middle
maybe it's something
you wrote years ago

492
00:28:40.166 --> 00:28:42.726 A:middle
and you don't remember how it
worked and you want to find

493
00:28:42.726 --> 00:28:45.796 A:middle
that line of code that handles
this click, so you can fix a bug

494
00:28:46.326 --> 00:28:51.096 A:middle
or so you can just modify
it for some new behavior

495
00:28:51.096 --> 00:28:52.936 A:middle
that your client is
asking you to add.

496
00:28:54.046 --> 00:28:56.486 A:middle
So, when this click happens,
there's a lot of stuff

497
00:28:56.486 --> 00:28:57.636 A:middle
that probably going on.

498
00:28:58.256 --> 00:29:00.696 A:middle
But you really only care
about code that you wrote,

499
00:29:01.136 --> 00:29:04.496 A:middle
maybe you have some analytics
code or a lot of other code

500
00:29:04.496 --> 00:29:06.176 A:middle
that it might be
hard to decipher

501
00:29:06.466 --> 00:29:11.416 A:middle
or see interleaved functions
and event calls and all of these

502
00:29:11.416 --> 00:29:14.396 A:middle
that happen in a big
modern web application.

503
00:29:15.656 --> 00:29:22.206 A:middle
So when I click on that,
you start wondering, "OK,

504
00:29:22.206 --> 00:29:24.736 A:middle
what script is handling
this button?"

505
00:29:25.166 --> 00:29:27.026 A:middle
And it turns out it's this one.

506
00:29:28.356 --> 00:29:32.186 A:middle
But with the new Web
Inspector, we can dig deeper.

507
00:29:32.646 --> 00:29:36.876 A:middle
In the script, I can now see
a timeline representation

508
00:29:36.936 --> 00:29:38.506 A:middle
of what the script was doing.

509
00:29:39.956 --> 00:29:43.426 A:middle
So I can see over time where
the mouse events are coming in,

510
00:29:43.636 --> 00:29:46.286 A:middle
where the clicks events,
where the timer was added,

511
00:29:46.286 --> 00:29:47.706 A:middle
where the timers are firing,

512
00:29:48.186 --> 00:29:50.506 A:middle
where I might be
doing forced layout,

513
00:29:50.906 --> 00:29:56.426 A:middle
which is a pretty evil thing
to do in a modern web app.

514
00:29:56.686 --> 00:29:58.536 A:middle
So what's it looked like
in the Web Inspector?

515
00:29:59.876 --> 00:30:02.806 A:middle
Well, here's the new
Web Inspector Timeline.

516
00:30:03.946 --> 00:30:10.066 A:middle
And you can see in the sidebar
here we have all of our scripts

517
00:30:10.066 --> 00:30:14.186 A:middle
and resources from the page
broken out in their hierarchy

518
00:30:14.186 --> 00:30:18.856 A:middle
of how they're included by
you, the developer, in the page

519
00:30:19.356 --> 00:30:23.896 A:middle
and you can expand
each script to see what

520
00:30:23.896 --> 00:30:26.896 A:middle
that script was doing and
where the line of code was.

521
00:30:27.986 --> 00:30:30.786 A:middle
And in this case, you'll
see a whole timeline

522
00:30:30.886 --> 00:30:32.806 A:middle
where things are
happening repeatedly.

523
00:30:32.806 --> 00:30:35.046 A:middle
You'll start seeing
patterns and allow you

524
00:30:35.046 --> 00:30:38.176 A:middle
to identify problem areas if
something is firing too much,

525
00:30:38.466 --> 00:30:41.866 A:middle
too little, not at all, if
you don't see it in the list.

526
00:30:43.346 --> 00:30:46.806 A:middle
And if you want to dig deeper
into the code, all you have

527
00:30:46.836 --> 00:30:48.956 A:middle
to do is click right
there on the sidebar

528
00:30:49.036 --> 00:30:52.286 A:middle
and it will take you right to
that location, and you can mouse

529
00:30:52.286 --> 00:30:55.866 A:middle
up and down through the sidebar
and have your code on one side

530
00:30:56.126 --> 00:30:58.216 A:middle
and your timeline
data in the sidebar.

531
00:30:58.536 --> 00:31:01.726 A:middle
So you can get a good overview

532
00:31:01.726 --> 00:31:03.806 A:middle
of what the script is
doing really quick.

533
00:31:06.166 --> 00:31:07.906 A:middle
So that's the Source
Code Timelines

534
00:31:07.966 --> 00:31:10.306 A:middle
and I'll give you a demo
here in a little minute.

535
00:31:12.416 --> 00:31:14.586 A:middle
So something else that's new

536
00:31:14.586 --> 00:31:16.816 A:middle
in the Web Inspector
is Breakpoint Probes.

537
00:31:18.116 --> 00:31:22.406 A:middle
So you might have some
information that you want

538
00:31:22.406 --> 00:31:25.126 A:middle
to know when that
mouse is clicked

539
00:31:25.446 --> 00:31:27.486 A:middle
or when your mouse is moving.

540
00:31:27.886 --> 00:31:30.386 A:middle
And those things are kind of
hard to debug in the debugger.

541
00:31:31.006 --> 00:31:33.276 A:middle
You often have to resort
to printf debugging

542
00:31:33.276 --> 00:31:36.376 A:middle
because you don't want to
constantly be switching context

543
00:31:36.376 --> 00:31:40.516 A:middle
between your app in the
page and the Web Inspector.

544
00:31:42.396 --> 00:31:45.746 A:middle
So you often result to printf
debugging and you're cluttering

545
00:31:45.746 --> 00:31:48.936 A:middle
up your console with thousands
of lines and it's hard

546
00:31:48.936 --> 00:31:51.796 A:middle
to decipher, especially if
you're debugging multiple areas

547
00:31:52.206 --> 00:31:55.516 A:middle
that are not related
and you don't care

548
00:31:55.576 --> 00:31:57.276 A:middle
about the interloop data.

549
00:31:58.456 --> 00:32:00.906 A:middle
So this is where
Breakpoint Probes comes in.

550
00:32:00.956 --> 00:32:04.906 A:middle
It let's you see these
properties that you might care

551
00:32:04.906 --> 00:32:07.186 A:middle
about without having to
breakout into the Web Inspector.

552
00:32:07.636 --> 00:32:10.086 A:middle
So let's just go ahead
and give a demo of this.

553
00:32:12.086 --> 00:32:13.786 A:middle
So let's go to Safari here.

554
00:32:14.976 --> 00:32:19.346 A:middle
And I have a simple
stack the block game

555
00:32:22.716 --> 00:32:27.666 A:middle
that I want to-it's been a while
since this was written so I want

556
00:32:27.666 --> 00:32:28.706 A:middle
to see what's going on.

557
00:32:28.786 --> 00:32:31.396 A:middle
Let's go ahead and use the
Timeline panel for this.

558
00:32:32.186 --> 00:32:34.096 A:middle
I'll go ahead and bring
up the Web Inspector

559
00:32:34.396 --> 00:32:37.436 A:middle
in the Develop menu,
show Web Inspector.

560
00:32:38.846 --> 00:32:40.636 A:middle
And we'll go to the
Timeline panel.

561
00:32:41.426 --> 00:32:43.236 A:middle
And by default, the
Timeline is empty.

562
00:32:43.236 --> 00:32:44.716 A:middle
It's not recording all the time.

563
00:32:45.256 --> 00:32:48.566 A:middle
And it only automatically
records when you reload the page

564
00:32:49.126 --> 00:32:52.386 A:middle
or when you press the Record
button up here in the corner.

565
00:32:53.216 --> 00:32:55.556 A:middle
And this can record
any length of time

566
00:32:55.556 --> 00:32:57.356 A:middle
that you would like to record.

567
00:32:57.826 --> 00:32:59.866 A:middle
But when you-when
I reload the page,

568
00:32:59.866 --> 00:33:01.776 A:middle
it will only record
a little bit.

569
00:33:01.876 --> 00:33:04.066 A:middle
So I'm just going to go ahead
and start recording here

570
00:33:04.726 --> 00:33:07.676 A:middle
and see what this page is doing
as I interact with this game.

571
00:33:08.526 --> 00:33:11.906 A:middle
And you'll see the
events and all the work

572
00:33:11.906 --> 00:33:14.246 A:middle
that the engine is
doing in response

573
00:33:14.246 --> 00:33:17.156 A:middle
to these events start
filling up on the Timeline.

574
00:33:17.986 --> 00:33:21.776 A:middle
And I'll go ahead and stop this.

575
00:33:21.776 --> 00:33:25.946 A:middle
And my application has three
scripts, but the logic is all

576
00:33:25.946 --> 00:33:29.066 A:middle
in blocks.js, all the other
stuff is stuff I didn't

577
00:33:29.066 --> 00:33:29.556 A:middle
even write.

578
00:33:29.556 --> 00:33:31.046 A:middle
I don't even know
what's going on there.

579
00:33:31.906 --> 00:33:34.936 A:middle
So I can ignore those, but
they're doing some work.

580
00:33:34.936 --> 00:33:37.466 A:middle
And normally that
would clutter up my UI.

581
00:33:37.466 --> 00:33:40.456 A:middle
But they're collapsed here, so
they're not taking up any space.

582
00:33:41.226 --> 00:33:44.236 A:middle
I'll go ahead and expand the
script that I care about here

583
00:33:44.886 --> 00:33:51.856 A:middle
and I can see that Timers are
firing pretty-at a pretty good

584
00:33:51.856 --> 00:33:56.106 A:middle
clip as I'm interacting with
the page and there's key events

585
00:33:56.106 --> 00:33:57.706 A:middle
that are firing every
time I press a key.

586
00:33:59.116 --> 00:34:01.886 A:middle
Some of the other new
features of the timeline here,

